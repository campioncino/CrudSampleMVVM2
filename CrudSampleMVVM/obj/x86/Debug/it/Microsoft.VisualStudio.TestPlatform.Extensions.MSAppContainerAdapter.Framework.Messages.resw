<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UTA_AssemblyCleanupMethodWasUnsuccesful" xml:space="preserve">
    <value>Metodo di pulizia assembly {0}.{1} non riuscito. Messaggio di errore: {2}. Analisi dello stack: {3}</value>
  </data>
  <data name="Common_CannotBeNullOrEmpty" xml:space="preserve">
    <value>Il parametro non deve essere vuoto o null.</value>
  </data>
  <data name="UTA_TestInitializeAndCleanupMethodHasWrongSignature" xml:space="preserve">
    <value>Firma non corretta del metodo {0}.{1}. Il metodo deve essere non statico e pubblico, non deve restituire un valore né accettare parametri. Inoltre, se si utilizza async-await nel metodo di test il tipo restituito deve essere Task.</value>
  </data>
  <data name="UTA_ClassOrAssemblyInitializeMethodHasWrongSignature" xml:space="preserve">
    <value>Firma non corretta del metodo {0}.{1}. Il metodo deve essere statico e pubblico, non deve restituire un valore e deve accettare un singolo parametro di tipo TestContext. Inoltre, se si utilizza async-await nel metodo di test il tipo restituito deve essere Task.</value>
  </data>
  <data name="UTA_ErrorMultiAssemblyInit" xml:space="preserve">
    <value>UTA013: {0}: impossibile definire più di un metodo con l'attributo AssemblyInitialize nell'ambito di un assembly.</value>
  </data>
  <data name="UTA_ErrorMultiClassInit" xml:space="preserve">
    <value>UTA025: {0}: impossibile definire più di un metodo con l'attributo ClassInitialize nell'ambito di una classe.</value>
  </data>
  <data name="UTA_ErrorPredefinedTestProperty" xml:space="preserve">
    <value>UTA023: {0}: impossibile definire la proprietà predefinita {2} sul metodo {1}.</value>
  </data>
  <data name="UTA_InitMethodThrows" xml:space="preserve">
    <value>Il metodo di inizializzazione {0}.{1} ha generato un'eccezione. {2}: {3}.</value>
  </data>
  <data name="TestNotFound" xml:space="preserve">
    <value>Impossibile trovare il metodo di test {0}.</value>
  </data>
  <data name="Execution_Test_Timeout" xml:space="preserve">
    <value>Il test {0} ha superato il periodo di timeout dell'esecuzione.</value>
  </data>
  <data name="UTA_ErrorMultiInit" xml:space="preserve">
    <value>UTA018: {0}: impossibile definire più di un metodo con l'attributo TestInitialize.</value>
  </data>
  <data name="UTA_ErrorNonPublicTestClass" xml:space="preserve">
    <value>UTA001: attributo TestClass definito sulla classe non pubblica {0}</value>
  </data>
  <data name="UTA_ErrorIncorrectTestMethodSignature" xml:space="preserve">
    <value>UTA007: la firma del metodo {1} definito nella classe {0} non è corretta. Il metodo di test contrassegnato con l'attributo [TestMethod] deve essere non statico e pubblico, avere un valore void come tipo restituito e non deve contenere parametri. Esempio: public void Test.Class1.Test(). Inoltre, se si utilizza async-await nel metodo di test il tipo restituito deve essere Task. Esempio: public async Task Test.Class1.Test2()</value>
  </data>
  <data name="UTA_ErrorTestPropertyNullOrEmpty" xml:space="preserve">
    <value>UTA021: {0}: proprietà personalizzata Null o vuota definita sul metodo {1}. La proprietà personalizzata deve avere un nome valido.</value>
  </data>
  <data name="UTA_NoTestResult" xml:space="preserve">
    <value>Errore durante l'esecuzione dei test. Nessun risultato restituito dall'estensione. Se si utilizza l'estensione di TestMethodAttribute, contattare il fornitore.</value>
  </data>
  <data name="UTA_ClassCleanupMethodWasUnsuccesful" xml:space="preserve">
    <value>Metodo di pulizia classe {0}.{1} non riuscito. Messaggio di errore: {2}. Analisi dello stack: {3}</value>
  </data>
  <data name="UTA_ErrorTestPropertyAlreadyDefined" xml:space="preserve">
    <value>UTA022: {0}.{1}: la proprietà personalizzata "{2}" dell'agente è già definita. Verrà utilizzato il valore "{3}".</value>
  </data>
  <data name="UTA_ClassInitMethodThrows" xml:space="preserve">
    <value>Il metodo di inizializzazione della classe {0}.{1} ha generato un'eccezione. {2}: {3}.</value>
  </data>
  <data name="UTA_WrongThread" xml:space="preserve">
    <value>{0}. Se si utilizzano oggetti UI nel test, specificare l'attributo [UITestMethod] anziché [TestMethod] per eseguire il test nel thread UI.</value>
  </data>
  <data name="UTA_ExecuteThrewException" xml:space="preserve">
    <value>Eccezione generata durante l'esecuzione dei test. Se si utilizza l'estensione di TestMethodAttribute, contattare il fornitore. Messaggio di errore: {0}</value>
  </data>
  <data name="UTA_TestMethodThrows" xml:space="preserve">
    <value>Il metodo di test {0}.{1} ha generato un'eccezione: 
{2}</value>
  </data>
  <data name="UTA_CleanupMethodThrows" xml:space="preserve">
    <value>Il metodo TestCleanup {0}.{1} ha generato un'eccezione. {2}: {3}.</value>
  </data>
  <data name="UTA_InstanceCreationError" xml:space="preserve">
    <value>Impossibile creare un'istanza della classe {0}. Errore: {1}.</value>
  </data>
  <data name="UTA_TestContextTypeMismatchLoadError" xml:space="preserve">
    <value>Il tipo di {0}.TestContext non è corretto.</value>
  </data>
  <data name="UTA_ClassOrAssemblyCleanupMethodHasWrongSignature" xml:space="preserve">
    <value>Firma non corretta del metodo {0}.{1}. Il metodo deve essere statico e pubblico, non deve restituire un valore né accettare parametri. Inoltre, se si utilizza async-await nel metodo di test il tipo restituito deve essere Task.</value>
  </data>
  <data name="UTA_ErrorGenericTestMethod" xml:space="preserve">
    <value>UTA015: il metodo generico non può essere un metodo di test. La firma di {0}.{1} non è valida.</value>
  </data>
  <data name="UTA_AssemblyInitMethodThrows" xml:space="preserve">
    <value>Il metodo di inizializzazione assembly {0}.{1} ha generato un'eccezione. {2}: {3}. L'esecuzione del test verrà interrotta.</value>
  </data>
  <data name="UTA_ErrorMultiClean" xml:space="preserve">
    <value>UTA024: {0}: impossibile definire più di un metodo con l'attributo TestCleanup.</value>
  </data>
  <data name="UTF_FailedToGetExceptionMessage" xml:space="preserve">
    <value>(Impossibile ottenere il messaggio per un'eccezione di tipo {0} a causa di un'eccezione.)</value>
  </data>
  <data name="CouldNotInspectTypeDuringDiscovery" xml:space="preserve">
    <value>MSTestAdapter: impossibile individuare test nella classe '{0}' dell'assembly '{1}'. Motivo: {2}.</value>
  </data>
  <data name="UTA_TestContextSetError" xml:space="preserve">
    <value>Impossibile impostare la proprietà TestContext per la classe {0}. Errore: {1}.</value>
  </data>
  <data name="UTA_ErrorMultiAssemblyClean" xml:space="preserve">
    <value>UTA014: {0}: impossibile definire più di un metodo con l'attributo AssemblyCleanup nell'ambito di un assembly.</value>
  </data>
  <data name="UTA_FailedToGetTestMethodException" xml:space="preserve">
    <value>Impossibile ottenere l'eccezione generata dal metodo di test {0}.{1}.</value>
  </data>
  <data name="UTA_EndOfInnerExceptionTrace" xml:space="preserve">
    <value> --- Fine dell'analisi dello stack dell'eccezione interna ---</value>
  </data>
  <data name="UTA_ErrorInvalidTimeout" xml:space="preserve">
    <value>UTA054: l'attributo Timeout di {0}.{1} non è valido. Il timeout deve essere un valore integer valido non minore di 0.</value>
  </data>
  <data name="Common_MustBeGreaterThanZero" xml:space="preserve">
    <value>Il parametro deve essere maggiore di zero.</value>
  </data>
  <data name="ExecuteInClassicModeFails" xml:space="preserve">
    <value>Gli unit test per applicazioni Windows Store e Windows Phone non possono essere eseguiti all'esterno di appcontainer. Creare un pacchetto applicazione ed eseguire i test in modalità appcontainer.</value>
  </data>
  <data name="UTA_NoDefaultConstructor" xml:space="preserve">
    <value>Impossibile ottenere il costruttore predefinito per la classe {0}.</value>
  </data>
  <data name="UTA_TestContextLoadError" xml:space="preserve">
    <value>Impossibile trovare la proprietà {0}.TestContext. Errore: {1}.</value>
  </data>
  <data name="EnumeratorLoadTypeErrorFormat" xml:space="preserve">
    <value>{0}: {1}</value>
  </data>
  <data name="UTA_ErrorInValidTestContextSignature" xml:space="preserve">
    <value>UTA031: la classe {0} non contiene una proprietà TestContext valida. TestContext deve essere di tipo TestContext, non statico, pubblico e non in sola lettura. Esempio: public TestContext TestContext.</value>
  </data>
  <data name="UTA_CleanupMethodThrowsGeneralError" xml:space="preserve">
    <value>Errore durante la chiamata al metodo di pulizia dei test per la classe di test {0}: {1}</value>
  </data>
  <data name="UTA_MethodDoesNotExists" xml:space="preserve">
    <value>Il metodo {0}.{1} non esiste.</value>
  </data>
  <data name="TestAssembly_FileDoesNotExist" xml:space="preserve">
    <value>File inesistente: {0}</value>
  </data>
  <data name="UTA_CleanupStackTrace" xml:space="preserve">
    <value>Analisi dello stack TestCleanup</value>
  </data>
  <data name="UTA_TypeLoadError" xml:space="preserve">
    <value>Impossibile ottenere il tipo {0}. Errore: {1}.</value>
  </data>
  <data name="TypeLoadFailed" xml:space="preserve">
    <value>Impossibile caricare i tipi dall'origine test '{0}'. È possibile che alcuni o tutti i test non siano stati trovati nell'origine.</value>
  </data>
  <data name="UTA_ErrorMultiClassClean" xml:space="preserve">
    <value>UTA026: {0}: impossibile definire più di un metodo con l'attributo ClassCleanup nell'ambito di una classe.</value>
  </data>
</root>